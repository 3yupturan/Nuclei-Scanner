package http

import "github.com/projectdiscovery/nuclei/v3/pkg/utils/schema"

// httpRequestMetadata / properties
var httpRequestMetadata = []schema.PropertyMetadata{
	{
		PropName: "id",
		PropType: "string",
		Description: schema.MultiLine(
			"Optional ID of this HTTP Request Block",
			"This is useful when calling /executing this request block in flow",
			"By default, current index in the http array is used as ID",
			"Example: ",
			"```yaml",
			"- id: wp-login",
			"```",
		),
		Example: schema.PropertyExample("example-http-id"),
	},
	{
		PropName: "path",
		Description: schema.MultiLine(
			"Path contains HTTP URL[s] to be sent. Here only Path portion is generally specified and host is templatetized",
			"Example: ",
			"```yaml",
			"- path:",
			"\t"+`{{BaseURL}}/admin`,
			"```",
		),
		Example: schema.PropertyExamples(
			"\n\t- '{{BaseURL}}'",
			"\n\t- '{{RootURL}}'",
			"\n\t- '{{Hostname}}:8080/ca-cert'",
		),
	},
	{
		PropName: "raw",
		Description: schema.MultiLine(
			"Raw contains HTTP Request[s] in raw or request dump format",
			"Example: ",
			schema.MultiLine(
				"- raw:",
				"\t- |",
				"\t\tGET / HTTP/1.1",
				"\t\tHost: {{Hostname}}",
				"\n",
			),
			"\nNote: If input contains any path/query-params they are automerged unless explicitly disabled using 'disable-path-automerge'",
		),
		Example: schema.PropertyExamples(
			schema.MultiLine(
				"\n# raw-get-request",
				"\t- |",
				"\t\tGET / HTTP/1.1",
				"\t\tHost: {{Hostname}}",
				"\n",
			),
			schema.MultiLine(
				"\n# raw-post-request",
				"\t- |",
				"\t\tPOST / HTTP/1.1",
				"\t\tHost: {{Hostname}}",
				"\t\tContent-Type: application/json",
				"\t\tContent-Length: 13",
				"\n",
				"\t\t{\"key\": \"value\"}",
				"\n",
			),
		),
	},
	{
		PropName: "name",
		Description: schema.MultiLine(
			"Name is the optional name of the request",
			"If a name is specified, all the named request in a template can be matched upon",
			"in a combined manner allowing multi-request based matchers.",
		),
		Example: schema.PropertyExample("example-http-name"),
	},
	{
		PropName: "method",
		Description: schema.MultiLine(
			"Method is the HTTP method to be used for the request",
			"Example: ",
			"```yaml",
			"- method: GET",
			"```",
		),
		Example: schema.PropertyExamples(GetHTTPMethods()...),
	},
	{
		PropName: "headers",
		Description: schema.MultiLine(
			"Headers contains the HTTP headers to be sent with the request",
			"Example: ",
			"```yaml",
			"- headers:",
			"\tUser-Agent: Mozilla/5.0",
			"```",
		),
		Example: schema.PropertyExamples(
			"User-Agent: Mozilla/5.0",
			"Authorization: Bearer {{token}}",
			"X-Forwarded-For: {{Hostname}}",
			"Origin: {{BaseURL}}",
			"Referer: {{BaseURL}}/admin",
		),
	},
	{
		PropName: "body",
		Description: schema.MultiLine(
			"Body contains the HTTP body to be sent with the request",
			"Example: ",
			"```yaml",
			"- body: \"key=value&key2=value2\"",
			"```",
		),
		Example: schema.PropertyExample("key=value&key2=value2"),
	},
	{
		PropName: "redirects",
		Description: schema.MultiLine(
			"Redirects specifies whether to follow redirects or not",
			"This can be use in conjunction with max-redirects to effectively control the redirects",
			"Example: ",
			"```yaml",
			"- redirects: true",
			"```",
		),
		Example: schema.PropertyExample(true),
	},
	{
		PropName: "host-redirects",
		Description: schema.MultiLine(
			"HostRedirects specifies whether only redirects to the same host should be followed by the HTTP Client",
			"When set to true, only redirects to the same host are followed",
			"Example: ",
			"```yaml",
			"- host-redirects: true",
			"```",
		),
		Example: schema.PropertyExample(true),
	},
	{
		PropName: "max-redirects",
		Description: schema.MultiLine(
			"MaxRedirects is the maximum number of redirects to follow",
			"Example: ",
			"```yaml",
			"- max-redirects: 10",
			"```",
		),
		Example: schema.PropertyExample(10),
	},
	{
		PropName: "disable-path-automerge",
		Description: schema.MultiLine(
			"DisablePathAutomerge disables the automatic merging of path/query-params from input/target to path defined in template",
			"Example: ",
			"```yaml",
			"- disable-path-automerge: true",
			"```",
		),
		Example: schema.PropertyExample(true),
	},
	{
		PropName: "unsafe",
		Description: schema.MultiLine(
			"Unsafe specifies whether to use rawhttp engine for sending Non RFC-Compliant requests.",
			"This uses the [rawhttp](https://github.com/projectdiscovery/rawhttp) engine to achieve complete",
			"control over the request, with no normalization performed by the client.",
			"Example: ",
			"```yaml",
			"- unsafe: true",
			"```",
		),
		Example: schema.PropertyExample(true),
	},
	{
		PropName: "skip-variables-check",
		Description: schema.MultiLine(
			"SkipVariablesCheck skips the check for unresolved variables in request",
			"This is also useful in case where body contains payload in format of {{xyz}}",
			"Example: ",
			"```yaml",
			"- skip-variables-check: true",
			"```",
		),
		Example: schema.PropertyExample(true),
	},
	{
		PropName: "max-size",
		Description: schema.MultiLine(
			"MaxSize is the maximum size of the response body to be read",
			"Example: ",
			"```yaml",
			"- max-size: 1024",
			"```",
		),
		Example: schema.PropertyExample(1024),
	},
	{
		PropName: "read-all",
		Description: schema.MultiLine(
			"Enables force reading of the entire raw unsafe request body ignoring  any specified content length headers",
			"Example: ",
			"```yaml",
			"- read-all: true",
			"```",
		),
		Example: schema.PropertyExample(true),
	},
	{
		PropName: "self-contained",
		Description: schema.MultiLine(
			"SelfContained specifies whether the request is self-contained or not",
			"This means if the request is dependent on input or is self-contained",
			"Example: ",
			"```yaml",
			"- self-contained: true",
			"```",
		),
		Example: schema.PropertyExample(true),
	},
	{
		PropName: "cookie-reuse",
		Description: schema.MultiLine(
			"CookieReuse specifies whether to reuse the cookies from previous requests",
			"Example: ",
			"```yaml",
			"- cookie-reuse: true",
			"```",
		),
		Example: schema.PropertyExample(true),
	},
	{
		PropName: "disable-cookie",
		Description: schema.MultiLine(
			"Disable Cookie is an optional setting to disable cookie reuse for this request",
			"Example: ",
			"```yaml",
			"- disable-cookie: true",
			"```",
		),
		Example: schema.PropertyExample(true),
	},
	{
		PropName: "stop-at-first-match",
		Description: schema.MultiLine(
			"StopAtFirstMatch specifies whether to stop at first match or not",
			"This is useful for cases like brute-forcing where we want to stop once we find the first correct login credential",
			"Example: ",
			"```yaml",
			"- stop-at-first-match: true",
			"```",
		),
	},
	{
		PropName: "digest-username",
		Description: schema.MultiLine(
			"DigestUsername specifies the username for digest authentication",
			"Example: ",
			"```yaml",
			"- digest-username: admin",
			"```",
		),
		Example: schema.PropertyExample("admin"),
	},
	{
		PropName: "digest-password",
		Description: schema.MultiLine(
			"DigestPassword specifies the password for digest authentication",
			"Example: ",
			"```yaml",
			"- digest-password: admin",
			"```",
		),
		Example: schema.PropertyExample("admin"),
	},
	{
		PropName: "filters",
		Description: schema.MultiLine(
			"Filter is only applicable for fuzzing requests and specifies whether this template should be run on this input or not",
			"It is a twin of matchers and it can be used to write any pre-conditions that should be met before running the template",
			"Example: ",
			"```yaml",
			"- filters:",
			"\t- type: dsl",
			"\t\tdsl:",
			"\t\t\t- 'len(query) > 0'",
			"```",
			"With this filter only those requests will be executed where query param is present in input will be executed by this template",
		),
		Example: schema.PropertyExamples(
			schema.MultiLine(
				" # has query params",
				"\t- type: dsl",
				"\t\tdsl:",
				"\t\t\t- 'len(query) > 0'",
				"\n",
			),
			schema.MultiLine(
				" # has request body",
				"\t- type: dsl",
				"\t\tdsl:",
				"\t\t\t- 'len(body) > 0'",
				"\n",
			),
			schema.MultiLine(
				" # has post method",
				"\t- type: dsl",
				"\t\tdsl:",
				"\t\t\t- 'method == \"POST\"'",
				"\n",
			),
			schema.MultiLine(
				" # has post method and body",
				"\t- type: dsl",
				"\t\tdsl:",
				"\t\t\t- 'method == \"POST\"'",
				"\t\t\t- 'len(body) > 0'",
				"\t\tcondition: and",
				"\n",
			),
		),
	},
	{
		PropName: "filters-condition",
		Description: schema.MultiLine(
			"FiltersCondition specifies the condition to be used for combining multiple filters",
			"By default, it is OR",
			"Example: ",
			"```yaml",
			"- filters-condition: and",
			"```",
		),
		Example: schema.PropertyExample("and"),
		Default: "OR",
	},
	{
		PropName: "payloads",
		Description: schema.MultiLine(
			"Payloads contains key-value pairs of payloads to be used",
			"These payloads when referenced in http request will be iterated appropriately and replaced",
			"Optionally payload also support loading values from file instead of defining them inline",
			"Example: ",
			"```yaml",
			"- payloads:",
			"\tusername:",
			"\t\t- admin",
			"\t\t- root",
			"\tpassword:",
			"\t\t- password",
			"\t\t- admin",
			"```",
		),
		Example: schema.PropertyExamples(
			schema.MultiLine(
				"  # inline payloads",
				"\tusername:",
				"\t\t- admin",
				"\t\t- root",
				"\tpassword:",
				"\t\t- password",
				"\t\t- admin",
				"\n",
			),
			schema.MultiLine(
				"  # file payloads",
				"\tusername: /path/to/usernames.txt",
				"\tpassword: /path/to/passwords.txt",
				"\n",
			),
		),
	},
	{
		PropName: "attack",
		Description: schema.MultiLine(
			"Attack is the type of payload combinations to perform",
			"batteringram the same payload into all defined payload positions at once, pitchfork combines multiple payload sets and clusterbomb generates permutations and combinations for all payloads",
			"Example: ",
			"```yaml",
			"- attack: clusterbomb",
			"```",
			"Note: this is only applicable when 'payloads' are defined",
		),
		Example: schema.PropertyExamples("batteringram", "pitchfork", "clusterbomb"),
	},
	{
		PropName: "threads",
		Description: schema.MultiLine(
			"Threads specifies concurreny with which requests should be sent",
			"It should not be specified unless explicitly behaviour and its value is obtained from -pc (-payload-concurrency) flag",
			"Example: ",
			"```yaml",
			"- threads: 10",
			"```",
		),
		Example: schema.PropertyExample(10),
	},
	{
		PropName: "race",
		Description: schema.MultiLine(
			"Race determines if all the request have to be attempted at the same time (Race Condition)",
			"The actual number of requests that will be sent is determined by the `race_count`  field.",
			"Example: ",
			"```yaml",
			"- race: true",
			"  race_count: 100",
			"```",
		),
		Example: schema.PropertyExample(true),
	},
	{
		PropName: "race_count",
		Description: schema.MultiLine(
			"RaceCount specifies the number of requests to be sent when attempting race condition attacks",
			"Example: ",
			"```yaml",
			"- race: true",
			"  race_count: 100",
			"```",
		),
		Example: schema.PropertyExample(100),
	},
	{
		PropName: "pipeline",
		Description: schema.MultiLine(
			"Pipeline defines if the attack should be performed with HTTP 1.1 Pipelining",
			"All requests must be idempotent (GET/POST). This can be used for race conditions/billions requests.",
			"Example: ",
			"```yaml",
			"- pipeline: true",
			"```",
		),
		Example: schema.PropertyExample(true),
	},
	{
		PropName: "pipeline-concurrent-connections",
		Description: schema.MultiLine(
			"PipelineConcurrentConnections specifies the number of concurrent connections to be used for pipelining",
			"Example: ",
			"```yaml",
			"- pipeline-concurrent-connections: 10",
			"  pipeline: true",
			"```",
		),
		Example: schema.PropertyExample(10),
	},
	{
		PropName: "pipeline-requests-per-connection",
		Description: schema.MultiLine(
			"PipelineRequestsPerConnection specifies the number of requests to be sent per connection",
			"Example: ",
			"```yaml",
			"- pipeline: true",
			"  pipeline-requests-per-connection: 10",
			"```",
		),
		Example: schema.PropertyExample(10),
	},
	{
		PropName: "fuzzing",
		Description: schema.MultiLine(
			"Fuzzing or DAST specifies rules for fuzzing requests",
			"these rules mutate the input request to generate multiple requests",
			"For example, replacing all query param values with sqli payloads",
		),
	},
	{
		PropName: "req-condition",
		Description: schema.MultiLine(
			"Deprecated: this is automatically identified and used (https://github.com/projectdiscovery/nuclei/issues/2393)",
		),
		Deprecated: true,
	},
	{
		PropName: "iterate-all",
		Description: schema.MultiLine(
			"Deprecated: use flow to properly specify iteration logic",
		),
		Deprecated: true,
	},
	{
		PropName: "cookie-reuse",
		Description: schema.MultiLine(
			"Deprecated: this is default behaviour now use disable-cookie to explicitly disable cookie reuse",
		),
		Deprecated: true,
	},
	{
		PropName:   "signature",
		Deprecated: true,
	},
}

// httpRequestAnyOf required combinations
var httpRequestAnyOfRequired = []schema.RequiredCombos{
	schema.Require("path"),
	schema.Require("raw"),
	schema.Require("filters", "payload", "fuzzing"),
	schema.RequireBase(
		[]string{"payloads"},
		schema.Require("path"),
		schema.Require("raw"),
	),
}
